;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-343F-7804-44                      |
; |                        Seoul National University                        |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 1CEC8A7763A0A8CC3E5821E6BEF5DF9FA33323BEAB5BD92CE9A3F776E6C2B7B9
; Input MD5    : 40E6F2B7A26C8D6AB61442BB5CF4F391
; Input CRC32  : 94E8CEF0

; File Name   : /home/martin/fuzzing/LibAFL/binfuzz/tmp/racecar
; Format      : ELF for Intel 386 (Shared object)
; Interpreter '/lib/ld-linux.so.2'
; Needed Library 'libc.so.6'
;
; Source File : 'crtstuff.c'
; Source File : 'racecar.c'
; Source File : 'crtstuff.c'

                .686p
                .mmx
                .model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_0         dd 464C457Fh            ; DATA XREF: LOAD:000001DC↓o
                                        ; LOAD:000001EC↓o ...
                                        ; File format: \x7FELF
                db 1                    ; File class: 32-bit
                db 1                    ; Data encoding: little-endian
                db 1                    ; File version
                db 0                    ; OS/ABI: UNIX System V ABI
                db 0                    ; ABI Version
                db 7 dup(0)             ; Padding
                dw 3                    ; File type: Shared object
                dw 3                    ; Machine: Intel 386
                dd 1                    ; File version
                dd offset _start        ; Entry point
                dd 34h                  ; PHT file offset
                dd 3B04h                ; SHT file offset
                dd 0                    ; Processor-specific flags
                dw 34h                  ; ELF header size
                dw 20h                  ; PHT entry size
                dw 9                    ; Number of entries in PHT
                dw 28h                  ; SHT entry size
                dw 1Dh                  ; Number of entries in SHT
                dw 1Ch                  ; SHT entry index for string table
; ELF32 Program Header
; PHT Entry 0
dword_34        dd 6                    ; DATA XREF: LOAD:0000003C↓o
                                        ; Type: PHDR
                dd 34h                  ; File offset
                dd offset dword_34      ; Virtual address
                dd 34h                  ; Physical address
                dd 120h                 ; Size in file image
                dd 120h                 ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 1
                dd 3                    ; Type: INTERP
                dd 154h                 ; File offset
                dd offset aLibLdLinuxSo2 ; Virtual address
                dd 154h                 ; Physical address
                dd 13h                  ; Size in file image
                dd 13h                  ; Size in memory image
                dd 4                    ; Flags
                dd 1                    ; Alignment
; PHT Entry 2
                dd 1                    ; Type: LOAD
                dd 0                    ; File offset
                dd 0                    ; Virtual address
                dd 0                    ; Physical address
                dd 201Ch                ; Size in file image
                dd 201Ch                ; Size in memory image
                dd 5                    ; Flags
                dd 1000h                ; Alignment
; PHT Entry 3
                dd 1                    ; Type: LOAD
                dd 2E8Ch                ; File offset
                dd offset __frame_dummy_init_array_entry ; Virtual address
                dd 3E8Ch                ; Physical address
                dd 184h                 ; Size in file image
                dd 188h                 ; Size in memory image
                dd 6                    ; Flags
                dd 1000h                ; Alignment
; PHT Entry 4
                dd 2                    ; Type: DYNAMIC
                dd 2E94h                ; File offset
                dd offset _DYNAMIC      ; Virtual address
                dd 3E94h                ; Physical address
                dd 0F8h                 ; Size in file image
                dd 0F8h                 ; Size in memory image
                dd 6                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 5
                dd 4                    ; Type: NOTE
                dd 168h                 ; File offset
                dd offset dword_168     ; Virtual address
                dd 168h                 ; Physical address
                dd 44h                  ; Size in file image
                dd 44h                  ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 6
                dd 6474E550h            ; Type: EH_FRAME
                dd 1D7Ch                ; File offset
                dd offset __GNU_EH_FRAME_HDR ; Virtual address
                dd 1D7Ch                ; Physical address
                dd 7Ch                  ; Size in file image
                dd 7Ch                  ; Size in memory image
                dd 4                    ; Flags
                dd 4                    ; Alignment
; PHT Entry 7
                dd 6474E551h            ; Type: STACK
                dd 0                    ; File offset
                dd 0                    ; Virtual address
                dd 0                    ; Physical address
                dd 0                    ; Size in file image
                dd 0                    ; Size in memory image
                dd 6                    ; Flags
                dd 10h                  ; Alignment
; PHT Entry 8
                dd 6474E552h            ; Type: RO-AFTER
                dd 2E8Ch                ; File offset
                dd offset __frame_dummy_init_array_entry ; Virtual address
                dd 3E8Ch                ; Physical address
                dd 174h                 ; Size in file image
                dd 174h                 ; Size in memory image
                dd 4                    ; Flags
                dd 1                    ; Alignment
aLibLdLinuxSo2  db '/lib/ld-linux.so.2',0 ; DATA XREF: LOAD:0000005C↑o
                align 4
; ELF Note Entry
dword_168       dd 4                    ; DATA XREF: LOAD:000000DC↑o
                                        ; Name Size
                dd 10h                  ; Desc Size
                dd 1                    ; Type: NT_GNU_ABI_TAG
aGnu            db 'GNU',0              ; Name
                dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
; ELF Note Entry
                dd 4                    ; Name Size
                dd 14h                  ; Desc Size
                dd 3                    ; Type: NT_GNU_BUILD_ID
aGnu_0          db 'GNU',0              ; Name
                db 0C5h, 63h, 1Ah, 37h, 0Fh, 77h, 4, 0C4h, 43h, 12h, 0F6h ; Desc
                db 69h, 2Eh, 1Dh, 0A5h, 6Ch, 25h, 0C1h, 86h, 3Ch
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 2
elf_gnu_hash_symbias dd 1Ah
elf_gnu_hash_bitmask_nwords dd 1
elf_gnu_hash_shift dd 5
elf_gnu_hash_indexes dd 20002000h
elf_gnu_hash_bucket dd 0, 1Ah
elf_gnu_hash_chain dd 0C0E34BADh
; ELF Symbol Table
                Elf32_Sym <0>
                Elf32_Sym <offset aStrcmp - offset byte_37C, offset dword_0, 0, 12h, \ ; "strcmp"
                           0, 0>
                Elf32_Sym <offset aRead - offset byte_37C, offset dword_0, 0, 12h, 0, \ ; "read"
                           0>
                Elf32_Sym <offset aItmDeregistert - offset byte_37C, offset dword_0, \ ; "_ITM_deregisterTMCloneTable"
                           0, 20h, 0, 0>
                Elf32_Sym <offset aPrintf - offset byte_37C, offset dword_0, 0, 12h, \ ; "printf"
                           0, 0>
                Elf32_Sym <offset aFgets - offset byte_37C, offset dword_0, 0, 12h, 0,\ ; "fgets"
                           0>
                Elf32_Sym <offset aTime - offset byte_37C, offset dword_0, 0, 12h, 0, \ ; "time"
                           0>
                Elf32_Sym <offset aSleep - offset byte_37C, offset dword_0, 0, 12h, 0,\ ; "sleep"
                           0>
                Elf32_Sym <offset aAlarm - offset byte_37C, offset dword_0, 0, 12h, 0,\ ; "alarm"
                           0>
                Elf32_Sym <offset aStackChkFail - offset byte_37C, offset dword_0, 0, \ ; "__stack_chk_fail"
                           12h, 0, 0>
                Elf32_Sym <offset aCxaFinalize - offset byte_37C, offset dword_0, 0, \ ; "__cxa_finalize"
                           22h, 0, 0>
                Elf32_Sym <offset aMalloc - offset byte_37C, offset dword_0, 0, 12h, \ ; "malloc"
                           0, 0>
                Elf32_Sym <offset aPuts - offset byte_37C, offset dword_0, 0, 12h, 0, \ ; "puts"
                           0>
                Elf32_Sym <offset aGmonStart - offset byte_37C, offset dword_0, 0, \ ; "__gmon_start__"
                           20h, 0, 0>
                Elf32_Sym <offset aExit - offset byte_37C, offset dword_0, 0, 12h, 0, \ ; "exit"
                           0>
                Elf32_Sym <offset aSrand - offset byte_37C, offset dword_0, 0, 12h, 0,\ ; "srand"
                           0>
                Elf32_Sym <offset aStrlen - offset byte_37C, offset dword_0, 0, 12h, \ ; "strlen"
                           0, 0>
                Elf32_Sym <offset aLibcStartMain - offset byte_37C, offset dword_0, 0,\ ; "__libc_start_main"
                           12h, 0, 0>
                Elf32_Sym <offset aStdin - offset byte_37C, offset dword_0, 0, 11h, 0,\ ; "stdin"
                           0>
                Elf32_Sym <offset aSetvbuf - offset byte_37C, offset dword_0, 0, 12h, \ ; "setvbuf"
                           0, 0>
                Elf32_Sym <offset aFopen - offset byte_37C, offset dword_0, 0, 12h, 0,\ ; "fopen"
                           0>
                Elf32_Sym <offset aPutchar - offset byte_37C, offset dword_0, 0, 12h, \ ; "putchar"
                           0, 0>
                Elf32_Sym <offset aSrand+1 - offset byte_37C, offset dword_0, 0, 12h, \ ; "rand"
                           0, 0>
                Elf32_Sym <offset aStdout - offset byte_37C, offset dword_0, 0, 11h, \ ; "stdout"
                           0, 0>
                Elf32_Sym <offset aAtoi - offset byte_37C, offset dword_0, 0, 12h, 0, \ ; "atoi"
                           0>
                Elf32_Sym <offset aItmRegistertmc - offset byte_37C, offset dword_0, \ ; "_ITM_registerTMCloneTable"
                           0, 20h, 0, 0>
                Elf32_Sym <offset aIoStdinUsed - offset byte_37C, \ ; "_IO_stdin_used"
                           offset _IO_stdin_used, 4, 11h, 0, 10h>
; ELF String Table
byte_37C        db 0                    ; DATA XREF: LOAD:000001DC↑o
                                        ; LOAD:000001EC↑o ...
aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:000004E0↓o
aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:0000036C↑o
aExit           db 'exit',0             ; DATA XREF: LOAD:000002AC↑o
aSrand          db 'srand',0            ; DATA XREF: LOAD:000002BC↑o
                                        ; LOAD:0000032C↑o
aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000030C↑o
aPuts           db 'puts',0             ; DATA XREF: LOAD:0000028C↑o
aTime           db 'time',0             ; DATA XREF: LOAD:0000022C↑o
aPutchar        db 'putchar',0          ; DATA XREF: LOAD:0000031C↑o
aStdin          db 'stdin',0            ; DATA XREF: LOAD:000002EC↑o
aPrintf         db 'printf',0           ; DATA XREF: LOAD:0000020C↑o
aFgets          db 'fgets',0            ; DATA XREF: LOAD:0000021C↑o
aStrlen         db 'strlen',0           ; DATA XREF: LOAD:000002CC↑o
aRead           db 'read',0             ; DATA XREF: LOAD:000001EC↑o
aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000033C↑o
aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000027C↑o
aAlarm          db 'alarm',0            ; DATA XREF: LOAD:0000024C↑o
aAtoi           db 'atoi',0             ; DATA XREF: LOAD:0000034C↑o
aSleep          db 'sleep',0            ; DATA XREF: LOAD:0000023C↑o
aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000026C↑o
aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:000002FC↑o
aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:000001DC↑o
aLibcStartMain  db '__libc_start_main',0 ; DATA XREF: LOAD:000002DC↑o
aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000025C↑o
aGlibc21        db 'GLIBC_2.1',0        ; DATA XREF: LOAD:000004F0↓o
aGlibc213       db 'GLIBC_2.1.3',0      ; DATA XREF: LOAD:00000500↓o
aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000510↓o
aGlibc20        db 'GLIBC_2.0',0        ; DATA XREF: LOAD:00000520↓o
aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                                        ; DATA XREF: LOAD:000001FC↑o
aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000029C↑o
aItmRegistertmc db '_ITM_registerTMCloneTable',0
                                        ; DATA XREF: LOAD:0000035C↑o
                align 4
; ELF GNU Symbol Version Table
                dw 0
                dw 2                    ; strcmp@@GLIBC_2.0
                dw 2                    ; read@@GLIBC_2.0
                dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
                dw 2                    ; printf@@GLIBC_2.0
                dw 2                    ; fgets@@GLIBC_2.0
                dw 2                    ; time@@GLIBC_2.0
                dw 2                    ; sleep@@GLIBC_2.0
                dw 2                    ; alarm@@GLIBC_2.0
                dw 3                    ; __stack_chk_fail@@GLIBC_2.4
                dw 4                    ; __cxa_finalize@@GLIBC_2.1.3
                dw 2                    ; malloc@@GLIBC_2.0
                dw 2                    ; puts@@GLIBC_2.0
                dw 0                    ; local  symbol: __gmon_start__
                dw 2                    ; exit@@GLIBC_2.0
                dw 2                    ; srand@@GLIBC_2.0
                dw 2                    ; strlen@@GLIBC_2.0
                dw 2                    ; __libc_start_main@@GLIBC_2.0
                dw 2                    ; stdin@@GLIBC_2.0
                dw 2                    ; setvbuf@@GLIBC_2.0
                dw 5                    ; fopen@@GLIBC_2.1
                dw 2                    ; putchar@@GLIBC_2.0
                dw 2                    ; rand@@GLIBC_2.0
                dw 2                    ; stdout@@GLIBC_2.0
                dw 2                    ; atoi@@GLIBC_2.0
                dw 0                    ; local  symbol: _ITM_registerTMCloneTable
                dw 1                    ; global symbol: _IO_stdin_used
                dw 0
; ELF GNU Symbol Version Requirements
                Elf32_Verneed <1, 4, offset aLibcSo6 - offset byte_37C, 10h, 0> ; "libc.so.6"
                Elf32_Vernaux <0D696911h, 0, 5, offset aGlibc21 - offset byte_37C, \ ; "GLIBC_2.1"
                               10h>
                Elf32_Vernaux <9691F73h, 0, 4, offset aGlibc213 - offset byte_37C, \ ; "GLIBC_2.1.3"
                               10h>
                Elf32_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_37C, \ ; "GLIBC_2.4"
                               10h>
                Elf32_Vernaux <0D696910h, 0, 2, offset aGlibc20 - offset byte_37C, 0> ; "GLIBC_2.0"
; ELF REL Relocation Table
                Elf32_Rel <3E8Ch, 8>    ; R_386_RELATIVE
                Elf32_Rel <3E90h, 8>    ; R_386_RELATIVE
                Elf32_Rel <3FF8h, 8>    ; R_386_RELATIVE
                Elf32_Rel <4004h, 8>    ; R_386_RELATIVE
                Elf32_Rel <3FE4h, 306h> ; R_386_GLOB_DAT _ITM_deregisterTMCloneTable
                Elf32_Rel <3FE8h, 0A06h> ; R_386_GLOB_DAT __cxa_finalize
                Elf32_Rel <3FECh, 0D06h> ; R_386_GLOB_DAT __gmon_start__
                Elf32_Rel <3FF0h, 1206h> ; R_386_GLOB_DAT stdin
                Elf32_Rel <3FF4h, 1706h> ; R_386_GLOB_DAT stdout
                Elf32_Rel <3FFCh, 1906h> ; R_386_GLOB_DAT _ITM_registerTMCloneTable
; ELF JMPREL Relocation Table
                Elf32_Rel <3F98h, 107h> ; R_386_JMP_SLOT strcmp
                Elf32_Rel <3F9Ch, 207h> ; R_386_JMP_SLOT read
                Elf32_Rel <3FA0h, 407h> ; R_386_JMP_SLOT printf
                Elf32_Rel <3FA4h, 507h> ; R_386_JMP_SLOT fgets
                Elf32_Rel <3FA8h, 607h> ; R_386_JMP_SLOT time
                Elf32_Rel <3FACh, 707h> ; R_386_JMP_SLOT sleep
                Elf32_Rel <3FB0h, 807h> ; R_386_JMP_SLOT alarm
                Elf32_Rel <3FB4h, 907h> ; R_386_JMP_SLOT __stack_chk_fail
                Elf32_Rel <3FB8h, 0B07h> ; R_386_JMP_SLOT malloc
                Elf32_Rel <3FBCh, 0C07h> ; R_386_JMP_SLOT puts
                Elf32_Rel <3FC0h, 0E07h> ; R_386_JMP_SLOT exit
                Elf32_Rel <3FC4h, 0F07h> ; R_386_JMP_SLOT srand
                Elf32_Rel <3FC8h, 1007h> ; R_386_JMP_SLOT strlen
                Elf32_Rel <3FCCh, 1107h> ; R_386_JMP_SLOT __libc_start_main
                Elf32_Rel <3FD0h, 1307h> ; R_386_JMP_SLOT setvbuf
                Elf32_Rel <3FD4h, 1407h> ; R_386_JMP_SLOT fopen
                Elf32_Rel <3FD8h, 1507h> ; R_386_JMP_SLOT putchar
                Elf32_Rel <3FDCh, 1607h> ; R_386_JMP_SLOT rand
                Elf32_Rel <3FE0h, 1807h> ; R_386_JMP_SLOT atoi
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_init           segment dword public 'CODE' use32
                assume cs:_init
                ;org 618h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _init_proc
_init_proc      proc near               ; CODE XREF: __libc_csu_init+1C↓p
                push    ebx             ; _init
                sub     esp, 8
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, ds:(__gmon_start___ptr - 3F8Ch)[ebx]
                test    eax, eax
                jz      short loc_636
                call    ___gmon_start__

loc_636:                                ; CODE XREF: _init_proc+17↑j
                add     esp, 8
                pop     ebx
                retn
_init_proc      endp

_init           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 63Bh
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 10h
LOAD            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt            segment para public 'CODE' use32
                assume cs:_plt
                ;org 640h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


sub_640         proc near               ; CODE XREF: .plt:0000065B↓j
                                        ; .plt:0000066B↓j ...
; __unwind {
                push    dword ptr [ebx+4]
                jmp     dword ptr [ebx+8]
sub_640         endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strcmp. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    0
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _read. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    8
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    10h
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _fgets. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    18h
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _time. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    20h ; ' '
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _sleep. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    28h ; '('
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _alarm. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    30h ; '0'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION ___stack_chk_fail. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    38h ; '8'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _malloc. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    40h ; '@'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _puts. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    48h ; 'H'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _exit. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    50h ; 'P'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _srand. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    58h ; 'X'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _strlen. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    60h ; '`'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION ___libc_start_main. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    68h ; 'h'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _setvbuf. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    70h ; 'p'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _fopen. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    78h ; 'x'
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _putchar. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    80h
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _rand. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    88h
                jmp     sub_640
; [00000006 BYTES: COLLAPSED FUNCTION _atoi. PRESS NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    90h
                jmp     sub_640
; } // starts at 640
_plt            ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_plt_got        segment qword public 'CODE' use32
                assume cs:_plt_got
                ;org 780h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000006 BYTES: COLLAPSED FUNCTION ___cxa_finalize. PRESS NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION ___gmon_start__. PRESS NUMPAD+ TO EXPAND]
                align 10h
; } // starts at 780
_plt_got        ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use32
                assume cs:_text
                ;org 790h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn fuzzy-sp

                public _start
_start          proc near               ; DATA XREF: LOAD:00000018↑o
                xor     ebp, ebp
                pop     esi
                mov     ecx, esp
                and     esp, 0FFFFFFF0h
                push    eax
                push    esp             ; stack_end
                push    edx             ; rtld_fini
                call    sub_7C2
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                lea     eax, (__libc_csu_fini - 3F8Ch)[ebx]
                push    eax             ; fini
                lea     eax, (__libc_csu_init - 3F8Ch)[ebx]
                push    eax             ; init
                push    ecx             ; ubp_av
                push    esi             ; argc
                push    ds:(main_ptr - 3F8Ch)[ebx] ; main
                call    ___libc_start_main
                hlt
_start          endp


; =============== S U B R O U T I N E =======================================


sub_7C2         proc near               ; CODE XREF: _start+B↑p
                mov     ebx, [esp+0]
                retn
sub_7C2         endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


                public __x86_get_pc_thunk_bx
__x86_get_pc_thunk_bx proc near         ; CODE XREF: _init_proc+4↑p
                                        ; __do_global_dtors_aux+4↓p ...
                mov     ebx, [esp+0]
                retn
__x86_get_pc_thunk_bx endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_8A6↓p
                call    __x86_get_pc_thunk_dx
                add     edx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                lea     ecx, (__bss_start - 3F8Ch)[edx]
                lea     eax, (__bss_start - 3F8Ch)[edx]
                cmp     eax, ecx
                jz      short locret_818
                mov     eax, ds:(_ITM_deregisterTMCloneTable_ptr - 3F8Ch)[edx]
                test    eax, eax
                jz      short locret_818
                push    ebp
                mov     ebp, esp
                sub     esp, 14h
                push    ecx
                call    eax
                add     esp, 10h
                leave
                retn
; ---------------------------------------------------------------------------
                align 8

locret_818:                             ; CODE XREF: deregister_tm_clones+19↑j
                                        ; deregister_tm_clones+23↑j
                rep retn
deregister_tm_clones endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                call    __x86_get_pc_thunk_dx
                add     edx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                push    ebp
                lea     ecx, (__bss_start - 3F8Ch)[edx]
                lea     eax, (__bss_start - 3F8Ch)[edx]
                sub     eax, ecx
                mov     ebp, esp
                push    ebx
                sar     eax, 2
                mov     ebx, eax
                sub     esp, 4
                shr     ebx, 1Fh
                add     eax, ebx
                sar     eax, 1
                jz      short loc_862
                mov     edx, ds:(_ITM_registerTMCloneTable_ptr - 3F8Ch)[edx]
                test    edx, edx
                jz      short loc_862
                sub     esp, 8
                push    eax
                push    ecx
                call    edx
                add     esp, 10h

loc_862:                                ; CODE XREF: register_tm_clones+2C↑j
                                        ; register_tm_clones+36↑j
                mov     ebx, [ebp-4]
                leave
                retn
register_tm_clones endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

__do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ebx
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                sub     esp, 4
                cmp     ds:(__bss_start - 3F8Ch)[ebx], 0
                jnz     short loc_8B2
                mov     eax, ds:(__cxa_finalize_ptr - 3F8Ch)[ebx]
                test    eax, eax
                jz      short loc_8A6
                sub     esp, 0Ch
                push    (__dso_handle - 3F8Ch)[ebx] ; void *
                call    ___cxa_finalize
                add     esp, 10h

loc_8A6:                                ; CODE XREF: __do_global_dtors_aux+23↑j
                call    deregister_tm_clones
                mov     ds:(__bss_start - 3F8Ch)[ebx], 1

loc_8B2:                                ; CODE XREF: __do_global_dtors_aux+19↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
__do_global_dtors_aux endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

frame_dummy     proc near               ; CODE XREF: __libc_csu_init+44↓p
                                        ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                push    ebp
                mov     ebp, esp
                pop     ebp
                jmp     register_tm_clones
frame_dummy     endp


; =============== S U B R O U T I N E =======================================


                public __x86_get_pc_thunk_dx
__x86_get_pc_thunk_dx proc near         ; CODE XREF: deregister_tm_clones↑p
                                        ; register_tm_clones↑p
                mov     edx, [esp+0]
                retn
__x86_get_pc_thunk_dx endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public read_int
read_int        proc near               ; CODE XREF: race_type+36↓p
                                        ; car_menu+44↓p ...

var_30          = dword ptr -30h
buf             = byte ptr -2Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 34h
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, large gs:14h
                mov     [ebp+var_C], eax
                xor     eax, eax
                mov     [ebp+var_30], 0FFFFFFFFh
                sub     esp, 4
                push    1Fh             ; nbytes
                lea     eax, [ebp+buf]
                push    eax             ; buf
                push    0               ; fd
                call    _read
                add     esp, 10h
                sub     esp, 0Ch
                lea     eax, [ebp+buf]
                push    eax             ; nptr
                call    _atoi
                add     esp, 10h
                mov     edx, [ebp+var_C]
                xor     edx, large gs:14h
                jz      short loc_924
                call    __stack_chk_fail_local
; ---------------------------------------------------------------------------

loc_924:                                ; CODE XREF: read_int+50↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at 8CD
read_int        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public banner
banner          proc near               ; CODE XREF: main+2D↓p

s1              = dword ptr -28h
s2              = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 24h
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, large gs:14h
                mov     [ebp+var_C], eax
                xor     eax, eax
                lea     eax, (a133m - 3F8Ch)[ebx] ; "\x1B[1;33m"
                mov     [ebp+var_20], eax
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                mov     [ebp+var_1C], eax
                lea     eax, (a132m - 3F8Ch)[ebx] ; "\x1B[1;32m"
                mov     [ebp+var_18], eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                mov     [ebp+var_14], eax
                lea     eax, (a134m - 3F8Ch)[ebx] ; "\x1B[1;34m"
                mov     [ebp+var_10], eax
                sub     esp, 0Ch
                push    0               ; timer
                call    _time
                add     esp, 10h
                sub     esp, 0Ch
                push    eax             ; seed
                call    _srand
                add     esp, 10h
                call    _rand
                mov     ecx, eax
                mov     edx, 66666667h
                mov     eax, ecx
                imul    edx
                sar     edx, 1
                mov     eax, ecx
                sar     eax, 1Fh
                sub     edx, eax
                mov     eax, edx
                mov     edx, eax
                shl     edx, 2
                add     edx, eax
                mov     eax, ecx
                sub     eax, edx
                mov     eax, [ebp+eax*4+var_20]
                mov     [ebp+s1], eax

loc_9B9:                                ; CODE XREF: banner+D0↓j
                call    _rand
                mov     ecx, eax
                mov     edx, 66666667h
                mov     eax, ecx
                imul    edx
                sar     edx, 1
                mov     eax, ecx
                sar     eax, 1Fh
                sub     edx, eax
                mov     eax, edx
                mov     edx, eax
                shl     edx, 2
                add     edx, eax
                mov     eax, ecx
                sub     eax, edx
                mov     eax, [ebp+eax*4+var_20]
                mov     [ebp+s2], eax
                sub     esp, 8
                push    [ebp+s2]        ; s2
                push    [ebp+s1]        ; s1
                call    _strcmp
                add     esp, 10h
                test    eax, eax
                jz      short loc_9B9
                sub     esp, 0Ch
                lea     eax, (dword_1558 - 3F8Ch)[ebx]
                push    eax             ; s
                call    _puts
                add     esp, 10h
                sub     esp, 4
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                push    [ebp+s1]
                lea     eax, (aSSXxx - 3F8Ch)[ebx] ; "%s      ______                         "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 4
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                push    [ebp+s1]
                lea     eax, (aSSF - 3F8Ch)[ebx] ; "%s     /|_||_\\`.__                    "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 4
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                push    [ebp+s1]
                lea     eax, (aSSXxx_0 - 3F8Ch)[ebx] ; "%s    (   _    _ _\\                   "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 4
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                push    [ebp+s1]
                lea     eax, (aSSI - 3F8Ch)[ebx] ; "%s*** =`-(_)--(_)-'                    "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 8
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                lea     eax, (aSXxx - 3F8Ch)[ebx] ; "                                       "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 8
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                lea     eax, (aSN - 3F8Ch)[ebx] ; "                                       "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 8
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                lea     eax, (aSXxx - 3F8Ch)[ebx] ; "                                       "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 8
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                lea     eax, (aSI - 3F8Ch)[ebx] ; "                                       "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 8
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                lea     eax, (aSXxx - 3F8Ch)[ebx] ; "                                       "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 4
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                push    [ebp+s2]
                lea     eax, (aSSS - 3F8Ch)[ebx] ; "%s             _-_-  _/\\______\\__    "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 4
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                push    [ebp+s2]
                lea     eax, (aSSXxx_1 - 3F8Ch)[ebx] ; "%s           _-_-__ / ,-. -|-  ,-.`-.  "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 4
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                push    [ebp+s2]
                lea     eax, (aSOOSH - 3F8Ch)[ebx] ; "%s            _-_- `( o )----( o )-'   "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 4
                lea     eax, (a135m - 3F8Ch)[ebx] ; "\x1B[1;35m"
                push    eax
                push    [ebp+s2]
                lea     eax, (aSSXxx_2 - 3F8Ch)[ebx] ; "%s                   `-'      `-'      "...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 0Ch
                lea     eax, (dword_1888 - 3F8Ch)[ebx]
                push    eax             ; s
                call    _puts
                add     esp, 10h
                nop
                mov     eax, [ebp+var_C]
                xor     eax, large gs:14h
                jz      short loc_B8E
                call    __stack_chk_fail_local
; ---------------------------------------------------------------------------

loc_B8E:                                ; CODE XREF: banner+25E↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at 929
banner          endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public setup
setup           proc near               ; CODE XREF: main+28↓p

var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, large gs:14h
                mov     [ebp+var_C], eax
                xor     eax, eax
                mov     eax, ds:(stdin_ptr - 3F8Ch)[ebx]
                mov     eax, [eax]
                push    0               ; n
                push    2               ; modes
                push    0               ; buf
                push    eax             ; stream
                call    _setvbuf
                add     esp, 10h
                mov     eax, ds:(stdout_ptr - 3F8Ch)[ebx]
                mov     eax, [eax]
                push    0               ; n
                push    2               ; modes
                push    0               ; buf
                push    eax             ; stream
                call    _setvbuf
                add     esp, 10h
                sub     esp, 0Ch
                push    7Fh             ; seconds
                call    _alarm
                add     esp, 10h
                nop
                mov     eax, [ebp+var_C]
                xor     eax, large gs:14h
                jz      short loc_BFD
                call    __stack_chk_fail_local
; ---------------------------------------------------------------------------

loc_BFD:                                ; CODE XREF: setup+63↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at B93
setup           endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public race_type
race_type       proc near               ; CODE XREF: car_menu:loc_D15↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, large gs:14h
                mov     [ebp+var_C], eax
                xor     eax, eax
                mov     [ebp+var_10], 0FFFFFFFFh

loc_C26:                                ; CODE XREF: race_type+74↓j
                sub     esp, 0Ch
                lea     eax, (aSelectRace1Hig - 3F8Ch)[ebx] ; "\n\nSelect race:\n1. Highway battle\n2."...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                call    read_int
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 2
                jz      short loc_C6C
                cmp     [ebp+var_10], 1
                jz      short loc_C6C
                sub     esp, 4
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (aSInvalidChoice - 3F8Ch)[ebx] ; "\n%s[-] Invalid choice!%s\n"
                push    eax             ; format
                call    _printf
                add     esp, 10h

loc_C6C:                                ; CODE XREF: race_type+42↑j
                                        ; race_type+48↑j
                cmp     [ebp+var_10], 2
                jz      short loc_C78
                cmp     [ebp+var_10], 1
                jnz     short loc_C26

loc_C78:                                ; CODE XREF: race_type+6E↑j
                mov     eax, [ebp+var_10]
                mov     edx, [ebp+var_C]
                xor     edx, large gs:14h
                jz      short loc_C8C
                call    __stack_chk_fail_local
; ---------------------------------------------------------------------------

loc_C8C:                                ; CODE XREF: race_type+83↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at C02
race_type       endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public car_menu
car_menu        proc near               ; CODE XREF: main+5B↓p

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
s               = dword ptr -44h
buf             = dword ptr -40h
stream          = dword ptr -3Ch
var_38          = byte ptr -38h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 54h
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, large gs:14h
                mov     [ebp+var_C], eax
                xor     eax, eax
                mov     [ebp+var_4C], 0FFFFFFFFh
                mov     [ebp+var_58], 0FFFFFFFFh
                mov     [ebp+var_54], 0FFFFFFFFh

loc_CC3:                                ; CODE XREF: car_menu+82↓j
                sub     esp, 0Ch
                lea     eax, (dword_1948 - 3F8Ch)[ebx]
                push    eax             ; format
                call    _printf
                add     esp, 10h
                call    read_int
                mov     [ebp+var_4C], eax
                cmp     [ebp+var_4C], 2
                jz      short loc_D09
                cmp     [ebp+var_4C], 1
                jz      short loc_D09
                sub     esp, 4
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (aSInvalidChoice - 3F8Ch)[ebx] ; "\n%s[-] Invalid choice!%s\n"
                push    eax             ; format
                call    _printf
                add     esp, 10h

loc_D09:                                ; CODE XREF: car_menu+50↑j
                                        ; car_menu+56↑j
                cmp     [ebp+var_4C], 2
                jz      short loc_D15
                cmp     [ebp+var_4C], 1
                jnz     short loc_CC3

loc_D15:                                ; CODE XREF: car_menu+7C↑j
                call    race_type
                mov     [ebp+var_48], eax
                sub     esp, 0Ch
                push    0               ; timer
                call    _time
                add     esp, 10h
                sub     esp, 0Ch
                push    eax             ; seed
                call    _srand
                add     esp, 10h
                cmp     [ebp+var_4C], 1
                jnz     short loc_D42
                cmp     [ebp+var_48], 2
                jz      short loc_D4E

loc_D42:                                ; CODE XREF: car_menu+A9↑j
                cmp     [ebp+var_4C], 2
                jnz     short loc_DB1
                cmp     [ebp+var_48], 2
                jnz     short loc_DB1

loc_D4E:                                ; CODE XREF: car_menu+AF↑j
                call    _rand
                mov     ecx, eax
                mov     edx, 66666667h
                mov     eax, ecx
                imul    edx
                sar     edx, 2
                mov     eax, ecx
                sar     eax, 1Fh
                sub     edx, eax
                mov     eax, edx
                mov     [ebp+var_58], eax
                mov     edx, [ebp+var_58]
                mov     eax, edx
                shl     eax, 2
                add     eax, edx
                add     eax, eax
                sub     ecx, eax
                mov     eax, ecx
                mov     [ebp+var_58], eax
                call    _rand
                mov     ecx, eax
                mov     edx, 51EB851Fh
                mov     eax, ecx
                imul    edx
                sar     edx, 5
                mov     eax, ecx
                sar     eax, 1Fh
                sub     edx, eax
                mov     eax, edx
                mov     [ebp+var_54], eax
                mov     eax, [ebp+var_54]
                imul    eax, 64h ; 'd'
                sub     ecx, eax
                mov     eax, ecx
                mov     [ebp+var_54], eax
                jmp     loc_E81
; ---------------------------------------------------------------------------

loc_DB1:                                ; CODE XREF: car_menu+B5↑j
                                        ; car_menu+BB↑j
                cmp     [ebp+var_4C], 1
                jnz     short loc_DBD
                cmp     [ebp+var_48], 1
                jz      short loc_DC9

loc_DBD:                                ; CODE XREF: car_menu+124↑j
                cmp     [ebp+var_4C], 2
                jnz     short loc_E29
                cmp     [ebp+var_48], 1
                jnz     short loc_E29

loc_DC9:                                ; CODE XREF: car_menu+12A↑j
                call    _rand
                mov     ecx, eax
                mov     edx, 51EB851Fh
                mov     eax, ecx
                imul    edx
                sar     edx, 5
                mov     eax, ecx
                sar     eax, 1Fh
                sub     edx, eax
                mov     eax, edx
                mov     [ebp+var_58], eax
                mov     eax, [ebp+var_58]
                imul    eax, 64h ; 'd'
                sub     ecx, eax
                mov     eax, ecx
                mov     [ebp+var_58], eax
                call    _rand
                mov     ecx, eax
                mov     edx, 66666667h
                mov     eax, ecx
                imul    edx
                sar     edx, 2
                mov     eax, ecx
                sar     eax, 1Fh
                sub     edx, eax
                mov     eax, edx
                mov     [ebp+var_54], eax
                mov     edx, [ebp+var_54]
                mov     eax, edx
                shl     eax, 2
                add     eax, edx
                add     eax, eax
                sub     ecx, eax
                mov     eax, ecx
                mov     [ebp+var_54], eax
                jmp     short loc_E81
; ---------------------------------------------------------------------------

loc_E29:                                ; CODE XREF: car_menu+130↑j
                                        ; car_menu+136↑j
                call    _rand
                mov     ecx, eax
                mov     edx, 51EB851Fh
                mov     eax, ecx
                imul    edx
                sar     edx, 5
                mov     eax, ecx
                sar     eax, 1Fh
                sub     edx, eax
                mov     eax, edx
                mov     [ebp+var_58], eax
                mov     eax, [ebp+var_58]
                imul    eax, 64h ; 'd'
                sub     ecx, eax
                mov     eax, ecx
                mov     [ebp+var_58], eax
                call    _rand
                mov     ecx, eax
                mov     edx, 51EB851Fh
                mov     eax, ecx
                imul    edx
                sar     edx, 5
                mov     eax, ecx
                sar     eax, 1Fh
                sub     edx, eax
                mov     eax, edx
                mov     [ebp+var_54], eax
                mov     eax, [ebp+var_54]
                imul    eax, 64h ; 'd'
                sub     ecx, eax
                mov     eax, ecx
                mov     [ebp+var_54], eax

loc_E81:                                ; CODE XREF: car_menu+11B↑j
                                        ; car_menu+196↑j
                lea     eax, (aWaitingForTheR - 3F8Ch)[ebx] ; "\n[*] Waiting for the race to finish..."
                mov     [ebp+s], eax
                mov     [ebp+var_50], 0
                jmp     short loc_ECD
; ---------------------------------------------------------------------------

loc_E93:                                ; CODE XREF: car_menu+251↓j
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+s]
                add     eax, edx
                movzx   eax, byte ptr [eax]
                movsx   eax, al
                sub     esp, 0Ch
                push    eax             ; c
                call    _putchar
                add     esp, 10h
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+s]
                add     eax, edx
                movzx   eax, byte ptr [eax]
                cmp     al, 2Eh ; '.'
                jnz     short loc_EC9
                sub     esp, 0Ch
                push    0               ; seconds
                call    _sleep
                add     esp, 10h

loc_EC9:                                ; CODE XREF: car_menu+229↑j
                add     [ebp+var_50], 1

loc_ECD:                                ; CODE XREF: car_menu+200↑j
                sub     esp, 0Ch
                push    [ebp+s]         ; s
                call    _strlen
                add     esp, 10h
                mov     edx, eax
                mov     eax, [ebp+var_50]
                cmp     edx, eax
                ja      short loc_E93
                cmp     [ebp+var_4C], 1
                jnz     short loc_EF2
                mov     eax, [ebp+var_58]
                cmp     eax, [ebp+var_54]
                jl      short loc_F08

loc_EF2:                                ; CODE XREF: car_menu+257↑j
                cmp     [ebp+var_4C], 2
                jnz     loc_100C
                mov     eax, [ebp+var_58]
                cmp     eax, [ebp+var_54]
                jle     loc_100C

loc_F08:                                ; CODE XREF: car_menu+25F↑j
                sub     esp, 8
                lea     eax, (a132m - 3F8Ch)[ebx] ; "\x1B[1;32m"
                push    eax
                lea     eax, (aSYouWonTheRace - 3F8Ch)[ebx] ; "%s\n\n[+] You won the race!! You get 10"...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                mov     eax, (coins - 3F8Ch)[ebx]
                add     eax, 64h ; 'd'
                mov     (coins - 3F8Ch)[ebx], eax
                mov     eax, (coins - 3F8Ch)[ebx]
                sub     esp, 4
                lea     edx, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    edx
                push    eax
                lea     eax, (aCurrentCoinsDS - 3F8Ch)[ebx] ; "[+] Current coins: [%d]%s\n"
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 8
                lea     eax, (a0m - 3F8Ch)[ebx] ; "\x1B[0m"
                push    eax
                lea     eax, (aDoYouHaveAnyth - 3F8Ch)[ebx] ; "\n[!] Do you have anything to say to th"...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 0Ch
                push    171h            ; size
                call    _malloc
                add     esp, 10h
                mov     [ebp+buf], eax
                sub     esp, 8
                lea     eax, (aR - 3F8Ch)[ebx] ; "r"
                push    eax             ; modes
                lea     eax, (aFlagTxt - 3F8Ch)[ebx] ; "flag.txt"
                push    eax             ; filename
                call    _fopen
                add     esp, 10h
                mov     [ebp+stream], eax
                cmp     [ebp+stream], 0
                jnz     short loc_FC1
                sub     esp, 8
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (aSCouldNotOpenF - 3F8Ch)[ebx] ; "%s[-] Could not open flag.txt. Please c"...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 0Ch
                push    69h ; 'i'       ; status
                call    _exit
; ---------------------------------------------------------------------------

loc_FC1:                                ; CODE XREF: car_menu+30B↑j
                sub     esp, 4
                push    [ebp+stream]    ; stream
                push    2Ch ; ','       ; n
                lea     eax, [ebp+var_38]
                push    eax             ; s
                call    _fgets
                add     esp, 10h
                sub     esp, 4
                push    170h            ; nbytes
                push    [ebp+buf]       ; buf
                push    0               ; fd
                call    _read
                add     esp, 10h
                sub     esp, 0Ch
                lea     eax, (a3mtheManTheMyt - 3F8Ch)[ebx] ; "\n\x1B[3mThe Man, the Myth, the Legend!"...
                push    eax             ; s
                call    _puts
                add     esp, 10h
                sub     esp, 0Ch
                push    [ebp+buf]       ; format
                call    _printf
                add     esp, 10h
                jmp     short loc_106B
; ---------------------------------------------------------------------------

loc_100C:                               ; CODE XREF: car_menu+265↑j
                                        ; car_menu+271↑j
                cmp     [ebp+var_4C], 1
                jnz     short loc_101A
                mov     eax, [ebp+var_58]
                cmp     eax, [ebp+var_54]
                jg      short loc_1028

loc_101A:                               ; CODE XREF: car_menu+37F↑j
                cmp     [ebp+var_4C], 2
                jnz     short loc_106B
                mov     eax, [ebp+var_58]
                cmp     eax, [ebp+var_54]
                jge     short loc_106B

loc_1028:                               ; CODE XREF: car_menu+387↑j
                sub     esp, 8
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (aSYouLostTheRac - 3F8Ch)[ebx] ; "%s\n\n[-] You lost the race and all you"...
                push    eax             ; format
                call    _printf
                add     esp, 10h
                mov     (coins - 3F8Ch)[ebx], 0
                mov     eax, (coins - 3F8Ch)[ebx]
                sub     esp, 4
                lea     edx, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    edx
                push    eax
                lea     eax, (aCurrentCoinsDS - 3F8Ch)[ebx] ; "[+] Current coins: [%d]%s\n"
                push    eax             ; format
                call    _printf
                add     esp, 10h

loc_106B:                               ; CODE XREF: car_menu+379↑j
                                        ; car_menu+38D↑j ...
                nop
                mov     ecx, [ebp+var_C]
                xor     ecx, large gs:14h
                jz      short loc_107D
                call    __stack_chk_fail_local
; ---------------------------------------------------------------------------

loc_107D:                               ; CODE XREF: car_menu+3E5↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at C91
car_menu        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public info
info            proc near               ; CODE XREF: main+32↓p

buf             = dword ptr -14h
s               = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, large gs:14h
                mov     [ebp+var_C], eax
                xor     eax, eax
                sub     esp, 0Ch
                push    20h ; ' '       ; size
                call    _malloc
                add     esp, 10h
                mov     [ebp+buf], eax
                sub     esp, 0Ch
                push    20h ; ' '       ; size
                call    _malloc
                add     esp, 10h
                mov     [ebp+s], eax
                sub     esp, 8
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (aSinsertYourDat - 3F8Ch)[ebx] ; "\n%sInsert your data:\n\n"
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 0Ch
                lea     eax, (aName - 3F8Ch)[ebx] ; "Name: "
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 4
                push    1Fh             ; nbytes
                push    [ebp+buf]       ; buf
                push    0               ; fd
                call    _read
                add     esp, 10h
                sub     esp, 0Ch
                push    [ebp+buf]       ; s
                call    _strlen
                add     esp, 10h
                lea     edx, [eax-1]
                mov     eax, [ebp+buf]
                add     eax, edx
                mov     byte ptr [eax], 0
                sub     esp, 0Ch
                lea     eax, (aNickname - 3F8Ch)[ebx] ; "Nickname: "
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 4
                push    1Fh             ; nbytes
                push    [ebp+s]         ; buf
                push    0               ; fd
                call    _read
                add     esp, 10h
                sub     esp, 0Ch
                push    [ebp+s]         ; s
                call    _strlen
                add     esp, 10h
                lea     edx, [eax-1]
                mov     eax, [ebp+s]
                add     eax, edx
                mov     byte ptr [eax], 0
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                push    [ebp+s]
                lea     eax, (a133m - 3F8Ch)[ebx] ; "\x1B[1;33m"
                push    eax
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                push    [ebp+buf]
                lea     eax, (a133m - 3F8Ch)[ebx] ; "\x1B[1;33m"
                push    eax
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a132m - 3F8Ch)[ebx] ; "\x1B[1;32m"
                push    eax
                push    [ebp+buf]
                lea     eax, (a133m - 3F8Ch)[ebx] ; "\x1B[1;33m"
                push    eax
                lea     eax, (a132m - 3F8Ch)[ebx] ; "\x1B[1;32m"
                push    eax
                lea     eax, (aSWelcomeSSSSYo - 3F8Ch)[ebx] ; "\n%s[+] Welcome [%s%s%s]!\n\n%s[*] Your"...
                push    eax             ; format
                call    _printf
                add     esp, 30h
                mov     eax, (coins - 3F8Ch)[ebx]
                sub     esp, 8
                push    eax
                lea     eax, (aCurrentCoinsD - 3F8Ch)[ebx] ; "\n[*] Current coins: [%d]\n"
                push    eax             ; format
                call    _printf
                add     esp, 10h
                nop
                mov     eax, [ebp+var_C]
                xor     eax, large gs:14h
                jz      short loc_11CD
                call    __stack_chk_fail_local
; ---------------------------------------------------------------------------

loc_11CD:                               ; CODE XREF: info+144↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at 1082
info            endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public car_info
car_info        proc near               ; CODE XREF: main:loc_142B↓p

var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, large gs:14h
                mov     [ebp+var_C], eax
                xor     eax, eax
                sub     esp, 0Ch
                lea     eax, (dword_1BB0 - 3F8Ch)[ebx]
                push    eax             ; s
                call    _puts
                add     esp, 10h
                sub     esp, 0Ch
                lea     eax, (word_1C1E - 3F8Ch)[ebx]
                push    eax             ; s
                call    _puts
                add     esp, 10h
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a133m - 3F8Ch)[ebx] ; "\x1B[1;33m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (dword_1C34 - 3F8Ch)[ebx]
                push    eax             ; format
                call    _printf
                add     esp, 10h
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a133m - 3F8Ch)[ebx] ; "\x1B[1;33m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (dword_1C5C - 3F8Ch)[ebx]
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 0Ch
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a132m - 3F8Ch)[ebx] ; "\x1B[1;32m"
                push    eax
                lea     eax, (a133m - 3F8Ch)[ebx] ; "\x1B[1;33m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (dword_1C84 - 3F8Ch)[ebx]
                push    eax             ; format
                call    _printf
                add     esp, 20h
                sub     esp, 0Ch
                lea     eax, (dword_1BB0 - 3F8Ch)[ebx]
                push    eax             ; s
                call    _puts
                add     esp, 10h
                sub     esp, 0Ch
                lea     eax, (byte_1CB7 - 3F8Ch)[ebx]
                push    eax             ; s
                call    _puts
                add     esp, 10h
                sub     esp, 0Ch
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a132m - 3F8Ch)[ebx] ; "\x1B[1;32m"
                push    eax
                lea     eax, (a133m - 3F8Ch)[ebx] ; "\x1B[1;33m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (dword_1CD0 - 3F8Ch)[ebx]
                push    eax             ; format
                call    _printf
                add     esp, 20h
                sub     esp, 0Ch
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a132m - 3F8Ch)[ebx] ; "\x1B[1;32m"
                push    eax
                lea     eax, (a133m - 3F8Ch)[ebx] ; "\x1B[1;33m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (dword_1D08 - 3F8Ch)[ebx]
                push    eax             ; format
                call    _printf
                add     esp, 20h
                sub     esp, 4
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (byte_1D3B - 3F8Ch)[ebx]
                push    eax             ; format
                call    _printf
                add     esp, 10h
                sub     esp, 0Ch
                lea     eax, (dword_1BB0 - 3F8Ch)[ebx]
                push    eax             ; s
                call    _puts
                add     esp, 10h
                nop
                mov     eax, [ebp+var_C]
                xor     eax, large gs:14h
                jz      short loc_134D
                call    __stack_chk_fail_local
; ---------------------------------------------------------------------------

loc_134D:                               ; CODE XREF: car_info+174↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at 11D2
car_info        endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public menu
menu            proc near               ; CODE XREF: main:loc_141A↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; __unwind {
                push    ebp
                mov     ebp, esp
                push    ebx
                sub     esp, 14h
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, large gs:14h
                mov     [ebp+var_C], eax
                xor     eax, eax
                mov     [ebp+var_10], 0FFFFFFFFh

loc_1376:                               ; CODE XREF: menu+74↓j
                sub     esp, 0Ch
                lea     eax, (a1CarInfo2CarSe - 3F8Ch)[ebx] ; "\n1. Car info\n2. Car selection\n> "
                push    eax             ; format
                call    _printf
                add     esp, 10h
                call    read_int
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 2
                jz      short loc_13BC
                cmp     [ebp+var_10], 1
                jz      short loc_13BC
                sub     esp, 4
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (aSInvalidChoice - 3F8Ch)[ebx] ; "\n%s[-] Invalid choice!%s\n"
                push    eax             ; format
                call    _printf
                add     esp, 10h

loc_13BC:                               ; CODE XREF: menu+42↑j
                                        ; menu+48↑j
                cmp     [ebp+var_10], 2
                jz      short loc_13C8
                cmp     [ebp+var_10], 1
                jnz     short loc_1376

loc_13C8:                               ; CODE XREF: menu+6E↑j
                mov     eax, [ebp+var_10]
                mov     edx, [ebp+var_C]
                xor     edx, large gs:14h
                jz      short loc_13DC
                call    __stack_chk_fail_local
; ---------------------------------------------------------------------------

loc_13DC:                               ; CODE XREF: menu+83↑j
                mov     ebx, [ebp+var_4]
                leave
                retn
; } // starts at 1352
menu            endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame fuzzy-sp

; int __cdecl main(int argc, const char **argv, const char **envp)
                public main
main            proc near               ; DATA XREF: .got:main_ptr↓o

var_C           = dword ptr -0Ch
argc            = dword ptr  8
argv            = dword ptr  0Ch
envp            = dword ptr  10h

; __unwind {
                lea     ecx, [esp+4]
                and     esp, 0FFFFFFF0h
                push    dword ptr [ecx-4]
                push    ebp
                mov     ebp, esp
                push    ebx
                push    ecx
                sub     esp, 10h
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                mov     eax, large gs:14h
                mov     [ebp+var_C], eax
                xor     eax, eax
                call    setup
                call    banner
                call    info
                jmp     short loc_1463
; ---------------------------------------------------------------------------

loc_141A:                               ; CODE XREF: main+8A↓j
                call    menu
                cmp     eax, 1
                jz      short loc_142B
                cmp     eax, 2
                jz      short loc_1432
                jmp     short loc_1443
; ---------------------------------------------------------------------------

loc_142B:                               ; CODE XREF: main+41↑j
                call    car_info
                jmp     short loc_1463
; ---------------------------------------------------------------------------

loc_1432:                               ; CODE XREF: main+46↑j
                mov     (check - 3F8Ch)[ebx], 0
                call    car_menu
                jmp     short loc_1463
; ---------------------------------------------------------------------------

loc_1443:                               ; CODE XREF: main+48↑j
                sub     esp, 4
                lea     eax, (a136m - 3F8Ch)[ebx] ; "\x1B[1;36m"
                push    eax
                lea     eax, (a131m - 3F8Ch)[ebx] ; "\x1B[1;31m"
                push    eax
                lea     eax, (aSInvalidChoice - 3F8Ch)[ebx] ; "\n%s[-] Invalid choice!%s\n"
                push    eax             ; format
                call    _printf
                add     esp, 10h

loc_1463:                               ; CODE XREF: main+37↑j
                                        ; main+4F↑j ...
                mov     eax, (check - 3F8Ch)[ebx]
                test    eax, eax
                jnz     short loc_141A
                nop
                mov     eax, [ebp+var_C]
                xor     eax, large gs:14h
                jz      short loc_147F
                call    __stack_chk_fail_local
; ---------------------------------------------------------------------------

loc_147F:                               ; CODE XREF: main+97↑j
                lea     esp, [ebp-8]
                pop     ecx
                pop     ebx
                pop     ebp
                lea     esp, [ecx-4]
                retn
; } // starts at 13E1
main            endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


                public __libc_csu_init
__libc_csu_init proc near               ; DATA XREF: _start+1D↑o

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

; __unwind {
                push    ebp
                push    edi
                push    esi
                push    ebx
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                sub     esp, 0Ch
                mov     ebp, [esp+1Ch+arg_8]
                lea     esi, (__do_global_dtors_aux_fini_array_entry - 3F8Ch)[ebx]
                call    _init_proc
                lea     eax, (__frame_dummy_init_array_entry - 3F8Ch)[ebx]
                sub     esi, eax
                sar     esi, 2
                test    esi, esi
                jz      short loc_14E5
                xor     edi, edi
                lea     esi, [esi+0]

loc_14C8:                               ; CODE XREF: __libc_csu_init+53↓j
                sub     esp, 4
                push    ebp
                push    [esp+24h+arg_4]
                push    [esp+28h+arg_0]
                call    ds:(__frame_dummy_init_array_entry - 3F8Ch)[ebx+edi*4]
                add     edi, 1
                add     esp, 10h
                cmp     esi, edi
                jnz     short loc_14C8

loc_14E5:                               ; CODE XREF: __libc_csu_init+2E↑j
                add     esp, 0Ch
                pop     ebx
                pop     esi
                pop     edi
                pop     ebp
                retn
; } // starts at 1490
__libc_csu_init endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


                public __libc_csu_fini
__libc_csu_fini proc near               ; DATA XREF: _start+16↑o
; __unwind {
                rep retn
; } // starts at 14F0
__libc_csu_fini endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: noreturn

                public __stack_chk_fail_local
__stack_chk_fail_local proc near        ; CODE XREF: read_int+52↑p
                                        ; banner+260↑p ...
; __unwind {
                push    ebx
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                sub     esp, 8
                call    ___stack_chk_fail
; } // starts at 1500
__stack_chk_fail_local endp

_text           ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_fini           segment dword public 'CODE' use32
                assume cs:_fini
                ;org 1514h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B R O U T I N E =======================================


                public _term_proc
_term_proc      proc near
                push    ebx             ; _fini
                sub     esp, 8
                call    __x86_get_pc_thunk_bx
                add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
                add     esp, 8
                pop     ebx
                retn
_term_proc      endp

_fini           ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rodata         segment dword public 'CONST' use32
                assume cs:_rodata
                ;org 1528h
                public _fp_hw
_fp_hw          dd 3
                public _IO_stdin_used
_IO_stdin_used  dd 20001h               ; DATA XREF: LOAD:0000036C↑o
a133m           db 1Bh,'[1;33m',0       ; DATA XREF: banner+1D↑o
                                        ; info+DA↑o ...
a136m           db 1Bh,'[1;36m',0       ; DATA XREF: banner+26↑o
                                        ; race_type+4D↑o ...
a132m           db 1Bh,'[1;32m',0       ; DATA XREF: banner+2F↑o
                                        ; car_menu+27A↑o ...
a131m           db 1Bh,'[1;31m',0       ; DATA XREF: banner+38↑o
                                        ; race_type+54↑o ...
a134m           db 1Bh,'[1;34m',0       ; DATA XREF: banner+41↑o
dword_1558      dd 8E9FF00Ah, 1Bh dup(8E9FF08Ch)
                                        ; DATA XREF: banner+D5↑o
                db 8Ch, 0
a135m           db 1Bh,'[1;35m',0       ; DATA XREF: banner+E7↑o
                                        ; banner+103↑o ...
                align 4
aSSXxx          db '%s      ______                                       %s|xxx|',0Ah
                                        ; DATA XREF: banner+F1↑o
                db 0
                align 4
aSSF            db '%s     /|_||_\`.__                                   %s| F |',0Ah
                                        ; DATA XREF: banner+10D↑o
                db 0
                align 4
aSSXxx_0        db '%s    (   _    _ _\                                  %s|xxx|',0Ah
                                        ; DATA XREF: banner+129↑o
                db 0
                align 4
aSSI            db '%s*** =`-(_)--(_)-',27h,'                                  %s| I '
                                        ; DATA XREF: banner+145↑o
                db '|',0Ah,0
                align 4
aSXxx           db '                                                   %s|xxx|',0Ah,0
                                        ; DATA XREF: banner+15E↑o
                                        ; banner+190↑o ...
aSN             db '                                                   %s| N |',0Ah,0
                                        ; DATA XREF: banner+177↑o
aSI             db '                                                   %s| I |',0Ah,0
                                        ; DATA XREF: banner+1A9↑o
aSSS            db '%s             _-_-  _/\______\__                    %s| S |',0Ah
                                        ; DATA XREF: banner+1DE↑o
                db 0
                align 4
aSSXxx_1        db '%s           _-_-__ / ,-. -|-  ,-.`-.                %s|xxx|',0Ah
                                        ; DATA XREF: banner+1FA↑o
                db 0
                align 4
aSOOSH          db '%s            _-_- `( o )----( o )-',27h,'                 %s| H '
                                        ; DATA XREF: banner+216↑o
                db '|',0Ah,0
                align 4
aSSXxx_2        db '%s                   `-',27h,'      `-',27h,'                    '
                                        ; DATA XREF: banner+232↑o
                db '%s|xxx|',0Ah,0
                align 4
dword_1888      dd 1Ch dup(8C8E9FF0h), 0 ; DATA XREF: banner+244↑o
aSelectRace1Hig db 0Ah                  ; DATA XREF: race_type+27↑o
                db 0Ah
                db 'Select race:',0Ah
                db '1. Highway battle',0Ah
                db '2. Circuit',0Ah
                db '> ',0
aSInvalidChoice db 0Ah                  ; DATA XREF: race_type+5B↑o
                                        ; car_menu+69↑o ...
                db '%s[-] Invalid choice!%s',0Ah,0
                align 4
dword_1948      dd 65530A0Ah, 7463656Ch, 72616320h, 2E310A3Ah, 9A9FF020h
                                        ; DATA XREF: car_menu+35↑o
                dd 2E320A97h, 8F9FF020h, 8FB8EF8Eh, 203E0Ah
aWaitingForTheR db 0Ah                  ; DATA XREF: car_menu:loc_E81↑o
                db '[*] Waiting for the race to finish...',0
                align 4
aSYouWonTheRace db '%s',0Ah             ; DATA XREF: car_menu+281↑o
                db 0Ah
                db '[+] You won the race!! You get 100 coins!',0Ah,0
aCurrentCoinsDS db '[+] Current coins: [%d]%s',0Ah,0
                                        ; DATA XREF: car_menu+2B0↑o
                                        ; car_menu+3CB↑o
a0m             db 1Bh,'[0m',0          ; DATA XREF: car_menu+2C2↑o
                align 4
aDoYouHaveAnyth db 0Ah                  ; DATA XREF: car_menu+2C9↑o
                db '[!] Do you have anything to say to the press after your big victo'
                db 'ry?',0Ah
                db '> %s',0
aR              db 'r',0                ; DATA XREF: car_menu+2EE↑o
aFlagTxt        db 'flag.txt',0         ; DATA XREF: car_menu+2F5↑o
                align 4
aSCouldNotOpenF db '%s[-] Could not open flag.txt. Please contact the creator.',0Ah,0
                                        ; DATA XREF: car_menu+317↑o
a3mtheManTheMyt db 0Ah                  ; DATA XREF: car_menu+35C↑o
                db 1Bh,'[3mThe Man, the Myth, the Legend! The grand winner of the rac'
                db 'e wants the whole world to know this: ',1Bh,'[0m',0
                align 4
aSYouLostTheRac db '%s',0Ah             ; DATA XREF: car_menu+3A1↑o
                db 0Ah
                db '[-] You lost the race and all your coins!',0Ah,0
aSinsertYourDat db 0Ah                  ; DATA XREF: info+47↑o
                db '%sInsert your data:',0Ah
                db 0Ah,0
aName           db 'Name: ',0           ; DATA XREF: info+59↑o
aNickname       db 'Nickname: ',0       ; DATA XREF: info+96↑o
aSWelcomeSSSSYo db 0Ah                  ; DATA XREF: info+111↑o
                db '%s[+] Welcome [%s%s%s]!',0Ah
                db 0Ah
                db '%s[*] Your name is [%s%s%s] but everybody calls you.. [%s%s%s]!',0
aCurrentCoinsD  db 0Ah                  ; DATA XREF: info+12A↑o
                db '[*] Current coins: [%d]',0Ah,0
dword_1BB0      dd 8E9FF00Ah, 1Ah dup(8E9FF08Ch)
                                        ; DATA XREF: car_info+20↑o
                                        ; car_info+BA↑o ...
                db 8Ch, 0
word_1C1E       dw 430Ah                ; DATA XREF: car_info+32↑o
                dd 23207261h, 74732031h, 3A737461h, 0F0202020h, 979A9Fh
dword_1C34      dd 70535B0Ah, 5D646565h, 2020203Ah, 20202020h, 0E2732520h
                                        ; DATA XREF: car_info+56↑o
                dd 96E28B96h, 8B96E28Bh, 96E27325h, 0A73258Bh, 0
dword_1C5C      dd 63415B0Ah, 656C6563h, 69746172h, 3A5D6E6Fh, 0E2732520h
                                        ; DATA XREF: car_info+7A↑o
                dd 96E28B96h, 8B96E28Bh, 96E27325h, 8B96E28Bh, 0A7325h
dword_1C84      dd 61485B0Ah, 696C646Eh, 3A5D676Eh, 20202020h, 0E2732520h
                                        ; DATA XREF: car_info+A8↑o
                dd 96E28B96h, 8B96E28Bh, 96E27325h, 8B96E28Bh, 258B96E2h
                dd 8B96E273h, 258B96E2h
                db 73h, 0Ah, 0
byte_1CB7       db 0Ah                  ; DATA XREF: car_info+CC↑o
                dd 20726143h, 73203223h, 73746174h, 2020203Ah, 8E8F9FF0h
                dd 8FB8EFh
dword_1CD0      dd 70535B0Ah, 5D646565h, 2020203Ah, 20202020h, 0E2732520h
                                        ; DATA XREF: car_info+FA↑o
                dd 96E28B96h, 8B96E28Bh, 96E27325h, 8B96E28Bh, 258B96E2h
                dd 8B96E273h, 0E28B96E2h, 73258B96h, 0Ah
dword_1D08      dd 63415B0Ah, 656C6563h, 69746172h, 3A5D6E6Fh, 0E2732520h
                                        ; DATA XREF: car_info+128↑o
                dd 96E28B96h, 8B96E28Bh, 96E27325h, 8B96E28Bh, 258B96E2h
                dd 8B96E273h, 258B96E2h
                db 73h, 0Ah, 0
byte_1D3B       db 0Ah                  ; DATA XREF: car_info+148↑o
                dd 6E61485Bh, 6E696C64h, 203A5D67h, 20202020h, 96E27325h
                dd 8B96E28Bh, 0A7325h
a1CarInfo2CarSe db 0Ah                  ; DATA XREF: menu+27↑o
                db '1. Car info',0Ah
                db '2. Car selection',0Ah
                db '> ',0
_rodata         ends

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
LOAD            segment mempage public 'CODE' use32
                assume cs:LOAD
                ;org 1D79h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                align 4
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame_hdr   segment dword public 'CONST' use32
                assume cs:_eh_frame_hdr
                ;org 1D7Ch
__GNU_EH_FRAME_HDR dd 3B031B01h, 78h, 0Eh, 0FFFFE8C4h, 94h, 0FFFFEA04h, 0B8h
                                        ; DATA XREF: LOAD:000000FC↑o
                dd 0FFFFEB51h, 0CCh, 0FFFFEBADh, 0F0h, 0FFFFEE17h, 114h
                dd 0FFFFEE86h, 138h, 0FFFFEF15h, 15Ch, 0FFFFF306h, 180h
                dd 0FFFFF456h, 1A4h, 0FFFFF5D6h, 1C8h, 0FFFFF665h, 1ECh
                dd 0FFFFF714h, 220h, 0FFFFF774h, 26Ch, 0FFFFF784h, 280h
_eh_frame_hdr   ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_eh_frame       segment dword public 'CONST' use32
                assume cs:_eh_frame
                ;org 1DF8h
                dd 14h, 0
                dd 527A01h, 1087C01h, 4040C1Bh, 188h, 20h, 1Ch, 0FFFFE828h
                dd 140h, 46080E00h, 0F4A0C0Eh, 7804740Bh, 3B1A3F00h, 2224322Ah
                dd 10h, 40h, 0FFFFE944h, 10h, 0
                dd 20h, 54h, 0FFFFEA7Dh, 5Ch, 80E4100h, 0D420285h, 3834405h
                dd 0C3C55402h, 4040Ch, 20h, 78h, 0FFFFEAB5h, 26Ah, 80E4100h
                dd 0D420285h, 3834405h, 0C5026203h, 4040CC3h, 20h, 9Ch
                dd 0FFFFECFBh, 6Fh, 80E4100h, 0D420285h, 3834405h, 0C3C56702h
                dd 4040Ch, 20h, 0C0h, 0FFFFED46h, 8Fh, 80E4100h, 0D420285h
                dd 3834405h, 0C3C58702h, 4040Ch, 20h, 0E4h, 0FFFFEDB1h
                dd 3F1h, 80E4100h, 0D420285h, 3834405h, 0C503E903h, 4040CC3h
                dd 20h, 108h, 0FFFFF17Eh, 150h, 80E4100h, 0D420285h, 3834405h
                dd 0C5014803h, 4040CC3h, 20h, 12Ch, 0FFFFF2AAh, 180h, 80E4100h
                dd 0D420285h, 3834405h, 0C5017803h, 4040CC3h, 20h, 150h
                dd 0FFFFF406h, 8Fh, 80E4100h, 0D420285h, 3834405h, 0C3C58702h
                dd 4040Ch, 30h
                dd 174h, 0FFFFF471h, 0A8h, 10C4400h, 5104700h, 44007502h
                dd 7875030Fh, 2031006h, 93027C75h, 10CC1h, 0C541C341h
                dd 4040C43h, 48h, 1A8h, 0FFFFF4ECh, 5Dh, 80E4100h, 0E410285h
                dd 4103870Ch, 486100Eh, 83140E41h, 200E4E05h, 41240E69h
                dd 0E44280Eh, 300E442Ch, 47200E4Dh, 0C341140Eh, 0C641100Eh
                dd 0C7410C0Eh, 0C541080Eh
                dd 40Eh, 10h, 1F4h, 0FFFFF500h, 2, 0
                dd 18h, 208h, 0FFFFF4FCh, 14h, 80E4100h, 0E4E0283h, 10h
__FRAME_END__   dd 0
_eh_frame       ends

; ELF Initialization Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_init_array     segment dword public 'DATA' use32
                assume cs:_init_array
                ;org 3E8Ch
__frame_dummy_init_array_entry dd offset frame_dummy
                                        ; DATA XREF: LOAD:0000009C↑o
                                        ; LOAD:0000013C↑o ...
_init_array     ends                    ; Alternative name is '__init_array_start'

; ELF Termination Function Table
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_fini_array     segment dword public 'DATA' use32
                assume cs:_fini_array
                ;org 3E90h
__do_global_dtors_aux_fini_array_entry dd offset __do_global_dtors_aux
                                        ; DATA XREF: __libc_csu_init+16↑o
_fini_array     ends                    ; Alternative name is '__init_array_end'

; ELF Dynamic Information
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD            segment mempage public 'DATA' use32
                assume cs:LOAD
                ;org 3E94h
_DYNAMIC        Elf32_Dyn <1, <1>>      ; DATA XREF: LOAD:000000BC↑o
                                        ; .got:_GLOBAL_OFFSET_TABLE_↓o
                                        ; DT_NEEDED libc.so.6
                Elf32_Dyn <0Ch, <618h>> ; DT_INIT
                Elf32_Dyn <0Dh, <1514h>> ; DT_FINI
                Elf32_Dyn <19h, <3E8Ch>> ; DT_INIT_ARRAY
                Elf32_Dyn <1Bh, <4>>    ; DT_INIT_ARRAYSZ
                Elf32_Dyn <1Ah, <3E90h>> ; DT_FINI_ARRAY
                Elf32_Dyn <1Ch, <4>>    ; DT_FINI_ARRAYSZ
                Elf32_Dyn <6FFFFEF5h, <1ACh>> ; DT_GNU_HASH
                Elf32_Dyn <5, <37Ch>>   ; DT_STRTAB
                Elf32_Dyn <6, <1CCh>>   ; DT_SYMTAB
                Elf32_Dyn <0Ah, <12Bh>> ; DT_STRSZ
                Elf32_Dyn <0Bh, <10h>>  ; DT_SYMENT
                Elf32_Dyn <15h, <0>>    ; DT_DEBUG
                Elf32_Dyn <3, <3F8Ch>>  ; DT_PLTGOT
                Elf32_Dyn <2, <98h>>    ; DT_PLTRELSZ
                Elf32_Dyn <14h, <11h>>  ; DT_PLTREL
                Elf32_Dyn <17h, <580h>> ; DT_JMPREL
                Elf32_Dyn <11h, <530h>> ; DT_REL
                Elf32_Dyn <12h, <50h>>  ; DT_RELSZ
                Elf32_Dyn <13h, <8>>    ; DT_RELENT
                Elf32_Dyn <1Eh, <8>>    ; DT_FLAGS
                Elf32_Dyn <6FFFFFFBh, <8000001h>> ; DT_FLAGS_1
                Elf32_Dyn <6FFFFFFEh, <4E0h>> ; DT_VERNEED
                Elf32_Dyn <6FFFFFFFh, <1>> ; DT_VERNEEDNUM
                Elf32_Dyn <6FFFFFF0h, <4A8h>> ; DT_VERSYM
                Elf32_Dyn <6FFFFFFAh, <4>> ; DT_RELCOUNT
                Elf32_Dyn <0>           ; DT_NULL
                dd 8 dup(0)
LOAD            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_got            segment dword public 'DATA' use32
                assume cs:_got
                ;org 3F8Ch
_GLOBAL_OFFSET_TABLE_ dd offset _DYNAMIC ; DATA XREF: _init_proc+9↑o
                                        ; _start+10↑o ...
                dd 0
                dd 0
strcmp_ptr      dd offset strcmp        ; DATA XREF: _strcmp↑r
read_ptr        dd offset read          ; DATA XREF: _read↑r
printf_ptr      dd offset printf        ; DATA XREF: _printf↑r
fgets_ptr       dd offset fgets         ; DATA XREF: _fgets↑r
time_ptr        dd offset time          ; DATA XREF: _time↑r
sleep_ptr       dd offset sleep         ; DATA XREF: _sleep↑r
alarm_ptr       dd offset alarm         ; DATA XREF: _alarm↑r
__stack_chk_fail_ptr dd offset __stack_chk_fail
                                        ; DATA XREF: ___stack_chk_fail↑r
malloc_ptr      dd offset malloc        ; DATA XREF: _malloc↑r
puts_ptr        dd offset puts          ; DATA XREF: _puts↑r
exit_ptr        dd offset exit          ; DATA XREF: _exit↑r
srand_ptr       dd offset srand         ; DATA XREF: _srand↑r
strlen_ptr      dd offset strlen        ; DATA XREF: _strlen↑r
__libc_start_main_ptr dd offset __libc_start_main
                                        ; DATA XREF: ___libc_start_main↑r
setvbuf_ptr     dd offset setvbuf       ; DATA XREF: _setvbuf↑r
fopen_ptr       dd offset fopen         ; DATA XREF: _fopen↑r
putchar_ptr     dd offset putchar       ; DATA XREF: _putchar↑r
rand_ptr        dd offset rand          ; DATA XREF: _rand↑r
atoi_ptr        dd offset atoi          ; DATA XREF: _atoi↑r
_ITM_deregisterTMCloneTable_ptr dd offset _ITM_deregisterTMCloneTable
                                        ; DATA XREF: deregister_tm_clones+1B↑r
__cxa_finalize_ptr dd offset __cxa_finalize
                                        ; DATA XREF: ___cxa_finalize↑r
                                        ; __do_global_dtors_aux+1B↑r
__gmon_start___ptr dd offset __gmon_start__ ; DATA XREF: _init_proc+F↑r
                                        ; ___gmon_start__↑r
stdin_ptr       dd offset stdin         ; DATA XREF: setup+1D↑r
stdout_ptr      dd offset stdout        ; DATA XREF: setup+34↑r
main_ptr        dd offset main          ; DATA XREF: _start+26↑r
_ITM_registerTMCloneTable_ptr dd offset _ITM_registerTMCloneTable
                                        ; DATA XREF: register_tm_clones+2E↑r
_got            ends

; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_data           segment dword public 'DATA' use32
                assume cs:_data
                ;org 4000h
                public __data_start ; weak
__data_start    dd 0                    ; Alternative name is '__data_start'
                                        ; data_start
                public __dso_handle
__dso_handle    dd offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+28↑r
                                        ; .data:__dso_handle↓o
                public coins
coins           dd 45h                  ; DATA XREF: car_menu+290↑r
                                        ; car_menu+299↑w ...
                public check
check           dd 1                    ; DATA XREF: main:loc_1432↑w
                                        ; main:loc_1463↑r
_data           ends

; ===========================================================================

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss            segment byte public 'BSS' use32
                assume cs:_bss
                ;org 4010h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                public __bss_start
__bss_start     db ?                    ; DATA XREF: deregister_tm_clones+B↑o
                                        ; deregister_tm_clones+11↑o ...
                                        ; Alternative name is '__TMC_END__'
                                        ; completed.7283
                                        ; _edata
                align 4
_bss            ends

; ===========================================================================

; Segment type: Zero-length
_prgend         segment byte public '' use32
_end            label byte
_prgend         ends

; ===========================================================================

; Segment type: Externs
; extern
; int strcmp(const char *s1, const char *s2)
                extrn strcmp:near       ; CODE XREF: _strcmp↑j
                                        ; DATA XREF: .got:strcmp_ptr↑o
; ssize_t read(int fd, void *buf, size_t nbytes)
                extrn read:near         ; CODE XREF: _read↑j
                                        ; DATA XREF: .got:read_ptr↑o
; int printf(const char *format, ...)
                extrn printf:near       ; CODE XREF: _printf↑j
                                        ; DATA XREF: .got:printf_ptr↑o
; char *fgets(char *s, int n, FILE *stream)
                extrn fgets:near        ; CODE XREF: _fgets↑j
                                        ; DATA XREF: .got:fgets_ptr↑o
; time_t time(time_t *timer)
                extrn time:near         ; CODE XREF: _time↑j
                                        ; DATA XREF: .got:time_ptr↑o
; unsigned int sleep(unsigned int seconds)
                extrn sleep:near        ; CODE XREF: _sleep↑j
                                        ; DATA XREF: .got:sleep_ptr↑o
; unsigned int alarm(unsigned int seconds)
                extrn alarm:near        ; CODE XREF: _alarm↑j
                                        ; DATA XREF: .got:alarm_ptr↑o
                extrn __stack_chk_fail:near
                                        ; CODE XREF: ___stack_chk_fail↑j
                                        ; DATA XREF: .got:__stack_chk_fail_ptr↑o
; int __cdecl _cxa_finalize(void *)
                extrn __cxa_finalize:near ; weak
                                        ; CODE XREF: ___cxa_finalize↑j
                                        ; DATA XREF: .got:__cxa_finalize_ptr↑o
; void *malloc(size_t size)
                extrn malloc:near       ; CODE XREF: _malloc↑j
                                        ; DATA XREF: .got:malloc_ptr↑o
; int puts(const char *s)
                extrn puts:near         ; CODE XREF: _puts↑j
                                        ; DATA XREF: .got:puts_ptr↑o
; void exit(int status)
                extrn exit:near         ; CODE XREF: _exit↑j
                                        ; DATA XREF: .got:exit_ptr↑o
; void srand(unsigned int seed)
                extrn srand:near        ; CODE XREF: _srand↑j
                                        ; DATA XREF: .got:srand_ptr↑o
; size_t strlen(const char *s)
                extrn strlen:near       ; CODE XREF: _strlen↑j
                                        ; DATA XREF: .got:strlen_ptr↑o
; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extrn __libc_start_main:near
                                        ; CODE XREF: ___libc_start_main↑j
                                        ; DATA XREF: .got:__libc_start_main_ptr↑o
; struct _IO_FILE *stdin
                extrn stdin:dword       ; DATA XREF: .got:stdin_ptr↑o
; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
                extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
                                        ; DATA XREF: .got:setvbuf_ptr↑o
; FILE *fopen(const char *filename, const char *modes)
                extrn fopen:near        ; CODE XREF: _fopen↑j
                                        ; DATA XREF: .got:fopen_ptr↑o
; int putchar(int c)
                extrn putchar:near      ; CODE XREF: _putchar↑j
                                        ; DATA XREF: .got:putchar_ptr↑o
; int rand(void)
                extrn rand:near         ; CODE XREF: _rand↑j
                                        ; DATA XREF: .got:rand_ptr↑o
; struct _IO_FILE *stdout
                extrn stdout:dword      ; DATA XREF: .got:stdout_ptr↑o
; int atoi(const char *nptr)
                extrn atoi:near         ; CODE XREF: _atoi↑j
                                        ; DATA XREF: .got:atoi_ptr↑o
                extrn _ITM_deregisterTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                extrn __gmon_start__:near ; weak
                                        ; CODE XREF: ___gmon_start__↑j
                                        ; DATA XREF: .got:__gmon_start___ptr↑o
                extrn _ITM_registerTMCloneTable ; weak
                                        ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o


                end _start
